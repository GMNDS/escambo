import { assert, test, beforeEach, afterEach, describe } from 'poku';
import { cleanTestData, validateUUID, validateDate, validatePhoneNumber } from './setup.mjs';

console.log('üß™ Testes de Valida√ß√£o e Edge Cases com Poku');

describe('Valida√ß√µes e Edge Cases do Sistema', () => {
    
    beforeEach(async () => {
        await cleanTestData();
        console.log('üßπ Dados limpos para teste de valida√ß√£o');
    });

    afterEach(async () => {
        await cleanTestData();
        console.log('üßπ Limpeza p√≥s-teste de valida√ß√£o');
    });

    test('Teste 1: Valida√ß√µes de Entrada de Dados', async () => {
        console.log('\nüîê Teste 1: Valida√ß√µes de Entrada de Dados');
        
        // Importar modelos dinamicamente para evitar erros de inicializa√ß√£o
        const { ClientModel } = await import('../../src/models/clientModel.js');
        const { UserModel } = await import('../../src/models/userModel.js');
        const { TabModel } = await import('../../src/models/tabModel.js');
        const { PaymentModel } = await import('../../src/models/paymentModel.js');
        
        // Teste valida√ß√µes de cliente
        console.log('üë• Testando valida√ß√µes de cliente...');
        
        // Nome obrigat√≥rio
        try {
            new ClientModel({ name: '', phone_number: '11999887766' });
            assert.fail('Deveria falhar com nome vazio');
        } catch (error) {
            assert.strictEqual(error.message, 'Client name is required');
            console.log('‚úÖ Valida√ß√£o de nome obrigat√≥rio');
        }
        
        // Telefone obrigat√≥rio
        try {
            new ClientModel({ name: 'Jo√£o', phone_number: '' });
            assert.fail('Deveria falhar com telefone vazio');
        } catch (error) {
            assert.strictEqual(error.message, 'Valid phone number is required');
            console.log('‚úÖ Valida√ß√£o de telefone obrigat√≥rio');
        }
        
        // Telefone com formato inv√°lido
        try {
            new ClientModel({ name: 'Jo√£o', phone_number: '123' });
            assert.fail('Deveria falhar com telefone muito curto');
        } catch (error) {
            assert.strictEqual(error.message, 'Valid phone number is required');
            console.log('‚úÖ Valida√ß√£o de telefone muito curto');
        }
        
        // Teste valida√ß√µes de usu√°rio
        console.log('üë§ Testando valida√ß√µes de usu√°rio...');
        
        // Username obrigat√≥rio
        try {
            new UserModel({ username: '', password: 'senha123' });
            assert.fail('Deveria falhar com username vazio');
        } catch (error) {
            assert.strictEqual(error.message, 'Username is required');
            console.log('‚úÖ Valida√ß√£o de username obrigat√≥rio');
        }
        
        // Password obrigat√≥rio
        try {
            new UserModel({ username: 'admin', password: '' });
            assert.fail('Deveria falhar com password vazio');
        } catch (error) {
            assert.strictEqual(error.message, 'Password is required');
            console.log('‚úÖ Valida√ß√£o de password obrigat√≥rio');
        }
        
        console.log('‚úÖ Todas as valida√ß√µes de entrada funcionando');
    });

    test('Teste 2: Normaliza√ß√£o Avan√ßada de Dados', async () => {
        console.log('\nüì± Teste 2: Normaliza√ß√£o Avan√ßada de Dados');
        
        const { ClientModel } = await import('../../src/models/clientModel.js');
        
        // Teste normaliza√ß√£o de telefones brasileiros
        console.log('üìû Testando normaliza√ß√£o de telefones brasileiros...');
        const phoneTests = [
            // Formato b√°sico
            { input: '11999887766', expected: '11999887766' },
            // Com par√™nteses e h√≠fen
            { input: '(11)99988-7766', expected: '11999887766' },
            // Com espa√ßos
            { input: '11 99988 7766', expected: '11999887766' },
            // Com c√≥digo do pa√≠s
            { input: '+55 11 99988-7766', expected: '5511999887766' },
            // Formato misto
            { input: '+55(11) 99988-7766', expected: '5511999887766' },
            // Telefone fixo
            { input: '(11) 3456-7890', expected: '1134567890' },
            // Com c√≥digo do pa√≠s - telefone fixo
            { input: '+55 11 3456-7890', expected: '55113456789' }
        ];
        
        for (const { input, expected } of phoneTests) {
            const client = new ClientModel({ name: 'Teste Phone', phone_number: input });
            const created = await client.create();
            
            assert.strictEqual(created.phone_number, expected, 
                `Telefone "${input}" deve ser normalizado para "${expected}", mas foi "${created.phone_number}"`);
            console.log(`‚úÖ ${input} ‚Üí ${expected}`);
        }
        
        // Teste normaliza√ß√£o de nomes
        console.log('üë§ Testando normaliza√ß√£o de nomes...');
        const nameTests = [
            // Espa√ßos extras
            { input: '  Jo√£o Silva  ', expected: 'Jo√£o Silva' },
            // Tabs e quebras de linha
            { input: 'Maria\tSantos\n', expected: 'Maria Santos' },
            // M√∫ltiplos espa√ßos
            { input: 'Pedro   Jos√©   Santos', expected: 'Pedro Jos√© Santos' },
            // Caracteres especiais mantidos
            { input: 'Jos√©-Carlos', expected: 'Jos√©-Carlos' },
            { input: "Maria D'√Åvila", expected: "Maria D'√Åvila" },
            // Acentos mantidos
            { input: 'Jo√£o M√ºller', expected: 'Jo√£o M√ºller' }
        ];
        
        for (const { input, expected } of nameTests) {
            const client = new ClientModel({ name: input, phone_number: '11999887766' });
            const created = await client.create();
            
            assert.strictEqual(created.name.trim(), expected, 
                `Nome "${input}" deve ser normalizado para "${expected}"`);
            console.log(`‚úÖ "${input}" ‚Üí "${expected}"`);
        }
        
        console.log('‚úÖ Normaliza√ß√£o avan√ßada funcionando');
    });

    test('Teste 3: Limites e Constraints do Sistema', async () => {
        console.log('\nüìè Teste 3: Limites e Constraints do Sistema');
        
        const { ClientModel } = await import('../../src/models/clientModel.js');
        const { UserModel } = await import('../../src/models/userModel.js');
        
        // Teste limite de caracteres - Nome do cliente
        console.log('üìù Testando limite de caracteres para nome...');
        const longName = 'A'.repeat(300); // Nome muito longo (acima do limite)
        const client = new ClientModel({ name: longName, phone_number: '11999887766' });
        const created = await client.create();
        
        assert.ok(created.name.length <= 255, 'Nome deve ser limitado a 255 caracteres');
        assert.strictEqual(created.name.length, 255, 'Nome deve ser truncado exatamente em 255 caracteres');
        console.log(`‚úÖ Nome longo (${longName.length} chars) truncado para ${created.name.length} chars`);
        
        // Teste limite de caracteres - Username
        console.log('üë§ Testando limite de caracteres para username...');
        const longUsername = `admin_${'x'.repeat(100)}`;
        const user = new UserModel({ username: longUsername, password: 'senha123' });
        const createdUser = await user.create();
        
        assert.ok(createdUser.username.length <= 50, 'Username deve ser limitado a 50 caracteres');
        console.log(`‚úÖ Username longo (${longUsername.length} chars) truncado para ${createdUser.username.length} chars`);
        
        // Teste telefone com tamanho m√°ximo
        console.log('üìû Testando limite de telefone...');
        const longPhone = '1'.repeat(20); // Telefone muito longo
        const clientPhone = new ClientModel({ name: 'Teste Phone Long', phone_number: longPhone });
        const createdPhone = await clientPhone.create();
        
        assert.ok(createdPhone.phone_number.length <= 14, 'Telefone deve ser limitado a 14 caracteres');
        console.log(`‚úÖ Telefone longo (${longPhone.length} chars) limitado para ${createdPhone.phone_number.length} chars`);
        
        console.log('‚úÖ Todos os limites funcionando corretamente');
    });

    test('Teste 4: Edge Cases de Busca e Consulta', async () => {
        console.log('\nüîç Teste 4: Edge Cases de Busca e Consulta');
        
        const { ClientModel } = await import('../../src/models/clientModel.js');
        const { UserModel } = await import('../../src/models/userModel.js');
        
        // Teste busca com IDs malformados
        console.log('üÜî Testando busca com IDs malformados...');
        const invalidIds = [
            '', // ID vazio
            'abc123', // N√£o √© UUID
            '123', // Muito curto
            'invalid-uuid-format', // Formato errado
            null, // Null
            undefined // Undefined
        ];
        
        for (const invalidId of invalidIds) {
            try {
                await ClientModel.findById(invalidId);
                assert.fail(`Busca deveria falhar com ID inv√°lido: ${invalidId}`);
            } catch (error) {
                assert.strictEqual(error.message, 'Failed to find client');
                console.log(`‚úÖ Busca falhou corretamente com ID: "${invalidId}"`);
            }
        }
        
        // Teste busca com telefones malformados
        console.log('üì± Testando busca com telefones malformados...');
        const invalidPhones = [
            '', // Vazio
            '123', // Muito curto
            'abc', // N√£o num√©rico
            '1'.repeat(20), // Muito longo
        ];
        
        for (const invalidPhone of invalidPhones) {
            try {
                await ClientModel.findByPhoneNumber(invalidPhone);
                assert.fail(`Busca deveria falhar com telefone inv√°lido: ${invalidPhone}`);
            } catch (error) {
                assert.strictEqual(error.message, 'Failed to find client');
                console.log(`‚úÖ Busca falhou corretamente com telefone: "${invalidPhone}"`);
            }
        }
        
        console.log('‚úÖ Edge cases de busca funcionando');
    });

    test('Teste 5: Opera√ß√µes de Update com Edge Cases', async () => {
        console.log('\n‚úèÔ∏è Teste 5: Opera√ß√µes de Update com Edge Cases');
        
        const { ClientModel } = await import('../../src/models/clientModel.js');
        const { UserModel } = await import('../../src/models/userModel.js');
        
        // Criar dados v√°lidos primeiro
        const client = new ClientModel({ name: 'Jo√£o Original', phone_number: '11999887766' });
        const createdClient = await client.create();
        
        const user = new UserModel({ username: 'user_original', password: 'senha123' });
        const createdUser = await user.create();
        
        // Teste update sem ID
        console.log('üÜî Testando update sem ID...');
        try {
            const clientWithoutId = new ClientModel({ name: 'Sem ID', phone_number: '11999887766' });
            await clientWithoutId.update({ name: 'Nome Atualizado' });
            assert.fail('Update deveria falhar sem ID');
        } catch (error) {
            assert.strictEqual(error.message, 'Client ID is required for update');
            console.log('‚úÖ Update falhou corretamente sem ID');
        }
        
        // Teste update com ID inexistente
        console.log('üîç Testando update com ID inexistente...');
        try {
            const fakeId = '123e4567-e89b-12d3-a456-426614174000';
            const clientInstance = new ClientModel(createdClient);
            await clientInstance.update({ id: fakeId, name: 'Nome Atualizado' });
            assert.fail('Update deveria falhar com ID inexistente');
        } catch (error) {
            assert.strictEqual(error.message, 'Failed to update client');
            console.log('‚úÖ Update falhou corretamente com ID inexistente');
        }
        
        // Teste update com dados inv√°lidos
        console.log('‚ùå Testando update com dados inv√°lidos...');
        try {
            const clientInstance = new ClientModel(createdClient);
            await clientInstance.update({ 
                id: createdClient.id, 
                name: '', // Nome vazio
                phone_number: '11888776655' 
            });
            assert.fail('Update deveria falhar com nome vazio');
        } catch (error) {
            assert.strictEqual(error.message, 'Client name is required');
            console.log('‚úÖ Update falhou corretamente com nome vazio');
        }
        
        // Teste update parcial v√°lido
        console.log('‚úÖ Testando update parcial v√°lido...');
        const clientInstance = new ClientModel(createdClient);
        const updatedClient = await clientInstance.update({
            id: createdClient.id,
            name: 'Jo√£o Atualizado'
            // phone_number n√£o informado - deve manter o original
        });
        
        assert.strictEqual(updatedClient.name, 'Jo√£o Atualizado', 'Nome deve estar atualizado');
        assert.strictEqual(updatedClient.phone_number, '11999887766', 'Telefone deve manter o original');
        console.log('‚úÖ Update parcial funcionando');
        
        console.log('‚úÖ Edge cases de update funcionando');
    });

    test('Teste 6: Opera√ß√µes de Delete com Edge Cases', async () => {
        console.log('\nüóëÔ∏è Teste 6: Opera√ß√µes de Delete com Edge Cases');
        
        const { ClientModel } = await import('../../src/models/clientModel.js');
        const { UserModel } = await import('../../src/models/userModel.js');
        
        // Teste delete com ID inv√°lido
        console.log('üÜî Testando delete com IDs inv√°lidos...');
        const invalidIds = [
            '', // Vazio
            'invalid-id', // Formato inv√°lido
            '123e4567-e89b-12d3-a456-426614174000' // UUID v√°lido mas inexistente
        ];
        
        for (const invalidId of invalidIds) {
            try {
                await ClientModel.delete(invalidId);
                assert.fail(`Delete deveria falhar com ID inv√°lido: ${invalidId}`);
            } catch (error) {
                assert.strictEqual(error.message, 'Failed to delete client');
                console.log(`‚úÖ Delete falhou corretamente com ID: "${invalidId}"`);
            }
        }
        
        // Teste delete v√°lido
        console.log('‚úÖ Testando delete v√°lido...');
        const client = new ClientModel({ name: 'Para Deletar', phone_number: '11999887766' });
        const createdClient = await client.create();
        
        const deleted = await ClientModel.delete(createdClient.id);
        assert.strictEqual(deleted, true, 'Delete deve retornar true');
        
        // Verificar se foi realmente deletado
        try {
            await ClientModel.findById(createdClient.id);
            assert.fail('Cliente n√£o deveria mais existir');
        } catch (error) {
            assert.strictEqual(error.message, 'Failed to find client');
            console.log('‚úÖ Cliente realmente deletado');
        }
        
        // Teste delete duplo (tentar deletar novamente)
        console.log('üîÑ Testando delete duplo...');
        try {
            await ClientModel.delete(createdClient.id);
            assert.fail('Segundo delete deveria falhar');
        } catch (error) {
            assert.strictEqual(error.message, 'Failed to delete client');
            console.log('‚úÖ Delete duplo falhou corretamente');
        }
        
        console.log('‚úÖ Edge cases de delete funcionando');
    });

    test('Teste 7: Helpers de Valida√ß√£o', async () => {
        console.log('\nüîß Teste 7: Helpers de Valida√ß√£o');
        
        // Teste validateUUID
        console.log('üÜî Testando validateUUID...');
        const uuidTests = [
            { input: '123e4567-e89b-12d3-a456-426614174000', expected: true },
            { input: 'invalid-uuid', expected: false },
            { input: '', expected: false },
            { input: '123', expected: false },
            { input: null, expected: false },
            { input: undefined, expected: false }
        ];
        
        for (const { input, expected } of uuidTests) {
            const result = validateUUID(input);
            assert.strictEqual(result, expected, `UUID "${input}" deve retornar ${expected}`);
            console.log(`‚úÖ "${input}" ‚Üí ${result}`);
        }
        
        // Teste validateDate
        console.log('üìÖ Testando validateDate...');
        const dateTests = [
            { input: '2024-01-01T10:00:00.000Z', expected: true },
            { input: new Date().toISOString(), expected: true },
            { input: 'invalid-date', expected: false },
            { input: '', expected: false },
            { input: '2024-13-01', expected: false }, // M√™s inv√°lido
            { input: null, expected: false }
        ];
        
        for (const { input, expected } of dateTests) {
            const result = validateDate(input);
            assert.strictEqual(result, expected, `Data "${input}" deve retornar ${expected}`);
            console.log(`‚úÖ "${input}" ‚Üí ${result}`);
        }
        
        // Teste validatePhoneNumber
        console.log('üì± Testando validatePhoneNumber...');
        const phoneValidationTests = [
            { input: '11999887766', expected: true },
            { input: '1199988776', expected: true }, // 10 d√≠gitos
            { input: '119998877665', expected: true }, // 11 d√≠gitos
            { input: '123456789', expected: false }, // 9 d√≠gitos
            { input: '123456789012', expected: false }, // 12 d√≠gitos
            { input: '', expected: false },
            { input: 'abcdefghij', expected: false }
        ];
        
        for (const { input, expected } of phoneValidationTests) {
            const result = validatePhoneNumber(input);
            assert.strictEqual(result, expected, `Telefone "${input}" deve retornar ${expected}`);
            console.log(`‚úÖ "${input}" ‚Üí ${result}`);
        }
        
        console.log('‚úÖ Todos os helpers de valida√ß√£o funcionando');
    });

    test('Teste 8: Cen√°rios de Concorr√™ncia', async () => {
        console.log('\n‚ö° Teste 8: Cen√°rios de Concorr√™ncia');
        
        const { ClientModel } = await import('../../src/models/clientModel.js');
        
        // Teste cria√ß√£o simult√¢nea com dados similares
        console.log('üë• Testando cria√ß√£o simult√¢nea...');
        const promises = [];
        
        for (let i = 0; i < 5; i++) {
            promises.push(
                new ClientModel({ 
                    name: `Cliente Simult√¢neo ${i}`, 
                    phone_number: `1199988777${i}` 
                }).create()
            );
        }
        
        const results = await Promise.all(promises);
        
        // Verificar se todos foram criados com IDs √∫nicos
        const ids = results.map(r => r.id);
        const uniqueIds = new Set(ids);
        assert.strictEqual(uniqueIds.size, ids.length, 'Todos os IDs devem ser √∫nicos');
        console.log('‚úÖ Cria√ß√£o simult√¢nea com IDs √∫nicos');
        
        // Teste busca simult√¢nea
        console.log('üîç Testando busca simult√¢nea...');
        const searchPromises = ids.map(id => ClientModel.findById(id));
        const searchResults = await Promise.all(searchPromises);
        
        assert.strictEqual(searchResults.length, 5, 'Todas as buscas devem retornar resultado');
        searchResults.forEach((result, index) => {
            assert.ok(result, `Resultado ${index} n√£o deve ser null`);
            assert.strictEqual(result.id, ids[index], `ID deve coincidir para resultado ${index}`);
        });
        console.log('‚úÖ Busca simult√¢nea funcionando');
        
        console.log('‚úÖ Cen√°rios de concorr√™ncia funcionando');
    });
});

console.log('\nüéâ Todos os testes de valida√ß√£o e edge cases com Poku passaram!');
