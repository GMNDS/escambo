#!/usr/bin/env node

import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

console.log('üöÄ Executador de Testes de Integra√ß√£o com Poku');
console.log('===================================================\n');

// Configura√ß√£o dos testes
const testSuites = [
    {
        name: 'Testes de Sistema (Modelos)',
        file: 'tests/integration/systemIntegration.poku.test.mjs',
        description: 'CRUD completo de todos os modelos, fluxos de neg√≥cio, valida√ß√µes'
    },
    {
        name: 'Testes de API Completa',
        file: 'tests/integration/apiIntegration.poku.test.mjs',
        description: 'Endpoints REST, fluxos via HTTP, cen√°rios reais'
    },
    {
        name: 'Testes de Valida√ß√£o e Edge Cases',
        file: 'tests/integration/validationIntegration.poku.test.mjs',
        description: 'Valida√ß√µes, normaliza√ß√£o, limites, edge cases'
    }
];

// Fun√ß√£o para executar um conjunto de testes
async function runTestSuite(suite) {
    console.log(`üß™ Executando: ${suite.name}`);
    console.log(`üìù Descri√ß√£o: ${suite.description}`);
    console.log(`üìÅ Arquivo: ${suite.file}\n`);
    
    try {
        const startTime = Date.now();
        
        // Executar o teste com poku
        const { stdout, stderr } = await execAsync(`npx poku ${suite.file} --debug`);
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        console.log(stdout);
        
        if (stderr && stderr.trim()) {
            console.error('‚ö†Ô∏è Avisos/Erros:');
            console.error(stderr);
        }
        
        console.log(`‚úÖ ${suite.name} conclu√≠do em ${duration}ms\n`);
        console.log('=' .repeat(60) + '\n');
        
        return { success: true, duration, suite: suite.name };
        
    } catch (error) {
        console.error(`‚ùå Falha em: ${suite.name}`);
        console.error(`Erro: ${error.message}\n`);
        console.log('=' .repeat(60) + '\n');
        
        return { success: false, error: error.message, suite: suite.name };
    }
}

// Fun√ß√£o principal
async function runAllTests() {
    console.log('üî• Iniciando execu√ß√£o de todos os testes de integra√ß√£o...\n');
    
    const results = [];
    let totalDuration = 0;
    const overallStartTime = Date.now();
    
    // Executar cada conjunto de testes sequencialmente
    for (const suite of testSuites) {
        const result = await runTestSuite(suite);
        results.push(result);
        
        if (result.success) {
            totalDuration += result.duration;
        }
        
        // Pequena pausa entre os testes para limpeza
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    const overallEndTime = Date.now();
    const overallDuration = overallEndTime - overallStartTime;
    
    // Relat√≥rio final
    console.log('üìä RELAT√ìRIO FINAL DOS TESTES DE INTEGRA√á√ÉO');
    console.log('=' .repeat(60));
    
    let successCount = 0;
    let failureCount = 0;
    
    results.forEach((result, index) => {
        const status = result.success ? '‚úÖ PASSOU' : '‚ùå FALHOU';
        const duration = result.success ? `(${result.duration}ms)` : '';
        
        console.log(`${index + 1}. ${result.suite}: ${status} ${duration}`);
        
        if (result.success) {
            successCount++;
        } else {
            failureCount++;
            console.log(`   Erro: ${result.error}`);
        }
    });
    
    console.log('\n' + '=' .repeat(60));
    console.log(`üìà ESTAT√çSTICAS:`);
    console.log(`   Total de conjuntos: ${results.length}`);
    console.log(`   Sucessos: ${successCount}`);
    console.log(`   Falhas: ${failureCount}`);
    console.log(`   Taxa de sucesso: ${((successCount / results.length) * 100).toFixed(1)}%`);
    console.log(`   Tempo total: ${overallDuration}ms (${(overallDuration / 1000).toFixed(2)}s)`);
    
    if (failureCount === 0) {
        console.log('\nüéâ TODOS OS TESTES DE INTEGRA√á√ÉO PASSARAM!');
        console.log('üöÄ Sistema est√° funcionando corretamente!');
    } else {
        console.log(`\n‚ö†Ô∏è  ${failureCount} conjunto(s) de teste falharam.`);
        console.log('üîß Verifique os erros acima e corrija antes de prosseguir.');
    }
    
    console.log('\n' + '=' .repeat(60));
    
    // Exit code baseado no resultado
    process.exit(failureCount > 0 ? 1 : 0);
}

// Fun√ß√£o para executar apenas um conjunto espec√≠fico
async function runSpecificTest(testName) {
    const suite = testSuites.find(s => 
        s.name.toLowerCase().includes(testName.toLowerCase()) ||
        s.file.includes(testName)
    );
    
    if (!suite) {
        console.error(`‚ùå Conjunto de teste n√£o encontrado: ${testName}`);
        console.log('\nConjuntos dispon√≠veis:');
        testSuites.forEach((s, i) => {
            console.log(`${i + 1}. ${s.name} (${s.file})`);
        });
        process.exit(1);
    }
    
    console.log(`üéØ Executando conjunto espec√≠fico: ${suite.name}\n`);
    const result = await runTestSuite(suite);
    
    if (result.success) {
        console.log('üéâ Teste espec√≠fico passou!');
        process.exit(0);
    } else {
        console.log('‚ùå Teste espec√≠fico falhou!');
        process.exit(1);
    }
}

// Fun√ß√£o para mostrar ajuda
function showHelp() {
    console.log('üîß USO DO SCRIPT DE TESTES');
    console.log('=' .repeat(40));
    console.log('node run-poku-tests.mjs [comando] [op√ß√µes]\n');
    
    console.log('Comandos:');
    console.log('  (nenhum)     Executa todos os testes');
    console.log('  --help       Mostra esta ajuda');
    console.log('  --list       Lista todos os conjuntos de teste');
    console.log('  --run <nome> Executa conjunto espec√≠fico\n');
    
    console.log('Exemplos:');
    console.log('  node run-poku-tests.mjs');
    console.log('  node run-poku-tests.mjs --run sistema');
    console.log('  node run-poku-tests.mjs --run api');
    console.log('  node run-poku-tests.mjs --run validation\n');
}

// Fun√ß√£o para listar conjuntos de teste
function listTestSuites() {
    console.log('üìã CONJUNTOS DE TESTE DISPON√çVEIS');
    console.log('=' .repeat(40));
    
    testSuites.forEach((suite, index) => {
        console.log(`${index + 1}. ${suite.name}`);
        console.log(`   üìÅ ${suite.file}`);
        console.log(`   üìù ${suite.description}\n`);
    });
}

// Verifica√ß√£o de pr√©-requisitos
async function checkPrerequisites() {
    console.log('üîç Verificando pr√©-requisitos...');
    
    try {
        // Verificar se o poku est√° instalado
        await execAsync('npx poku --version');
        console.log('‚úÖ Poku encontrado');
        
        // Verificar se o banco est√° configurado
        if (!process.env.DATABASE_URL) {
            console.warn('‚ö†Ô∏è  DATABASE_URL n√£o encontrada - alguns testes podem falhar');
        } else {
            console.log('‚úÖ DATABASE_URL configurada');
        }
        
        console.log('‚úÖ Pr√©-requisitos verificados\n');
        return true;
        
    } catch (error) {
        console.error('‚ùå Pr√©-requisitos n√£o atendidos:');
        console.error(`   ${error.message}`);
        console.error('\nüí° Instale as depend√™ncias com: npm install');
        return false;
    }
}

// Processamento dos argumentos da linha de comando
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        showHelp();
        return;
    }
    
    if (args.includes('--list') || args.includes('-l')) {
        listTestSuites();
        return;
    }
    
    // Verificar pr√©-requisitos
    const prereqsOk = await checkPrerequisites();
    if (!prereqsOk) {
        process.exit(1);
    }
    
    if (args.includes('--run') || args.includes('-r')) {
        const testNameIndex = Math.max(args.indexOf('--run'), args.indexOf('-r')) + 1;
        const testName = args[testNameIndex];
        
        if (!testName) {
            console.error('‚ùå Nome do teste n√£o especificado');
            showHelp();
            process.exit(1);
        }
        
        await runSpecificTest(testName);
    } else {
        // Executar todos os testes
        await runAllTests();
    }
}

// Executar fun√ß√£o principal
main().catch(error => {
    console.error('‚ùå Erro fatal:', error);
    process.exit(1);
});
